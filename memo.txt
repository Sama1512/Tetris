## テトリス再現プロジェクト設計書（公式準拠）

### 1. 概要

本プロジェクトは、The Tetris Company のガイドラインに準拠したテトリスを忠実に再現することを目的とする。ゲーム性、機能性、UI設計においても正確な再現を目指す。

---

### 2. ゲーム仕様（モード別）

#### 2.1 クラシックテトリス（Tetris 単体プレイ仕様）

#### 2.1 プレイフィールド

* サイズ: 幅10列 × 高さ20行（+2行の非表示バッファ）
* ミノ: 7種類（I, O, T, S, Z, J, L）
* ミノ生成: 7-BAGシステム（シャッフルされた7個のミノを順番に出現）

#### 2.2 回転・移動

* 回転方式: SRS（Super Rotation System）
* ソフトドロップ: 下キーで落下速度UP（スコア加算あり）
* ハードドロップ: 上キー等で即着地（スコア加算＋即ロック）
* ロック遅延: 設置後一定時間（または移動・回転回数）でロック
* 壁蹴り: 有効

#### 2.3 特殊動作

* ホールド: 使用後、次のミノ出現までは再利用不可
* T-Spin: 正式な判定とスコア加算あり（Miniも含む）
* コンボ（REN）: 連続消去で加算
* Back-to-Back（B2B）: TetrisやT-Spinの連続で加算

#### 2.4 得点システム（例）

* シングル: 100点
* ダブル: 300点
* トリプル: 500点
* テトリス（4ライン）: 800点
* T-Spin Single: 400点、Double: 700点、Triple: 1200点
* T-Spin Mini: 100点
* ソフトドロップ: +1/マス
* ハードドロップ: +2/マス
* コンボ: 50 × コンボ数

---

#### 2.2 バトルテトリス（対戦仕様比較）

##### 2.2.1 Tetris 99 準拠

* ミノ生成: 7-BAGシステム
* プレイ人数: 最大99人まで
* ターゲットシステム:

  * 自動モード（ランダム、カウンター、バッジ狙い、KO狙い）
  * 手動選択による任意ターゲット指定（マウス/キーで相手選択）
* ガベージライン（おじゃまライン）:

  * 攻撃によって発生し、攻撃対象の下部に追加される
  * 相殺可能：一定時間内にラインを消すことでおじゃまをキャンセル可能
* 攻撃手段:

  * ライン数（2〜4）やT-Spin、B2B、コンボに応じて攻撃力が決定
* ターゲット選択アルゴリズム:

  * カウンター: 自分に攻撃してきている相手を自動反撃
  * KO狙い: 瀕死（上部近く）の相手を狙う
  * バッジ狙い: 攻撃バッジを多く持つ強者を狙う
  * ランダム: ランダムなプレイヤー
* バッジシステム:

  * 他プレイヤーをKOすることで攻撃バッジを獲得
  * 攻撃力が段階的に上昇（例：25%, 50%, 75%, 100%）
* チーム戦仕様:

  * 2〜4チームに分かれ、相手チームを全滅させたら勝利
  * 同じチームのプレイヤー同士では攻撃できない
  * チーム状態はUIで色・ラベル等で表示

##### 2.2.2 ぷよぷよテトリス準拠

* プレイ人数: 1対1（オフライン・オンライン）〜最大4人
* 攻撃システム:

  * ライン数による固定攻撃：T-Spinやテトリスに対して所定のガベージを送信
  * B2B・RENでの追加ボーナスあり（コンボは高威力）
* おじゃまライン:

  * 攻撃対象プレイヤーに即時にガベージが追加される（事前予告あり）
  * 相殺可能：直後の攻撃でガベージを打ち消す
* ターゲット指定:

  * 原則固定（対戦中の相手）またはランダム
  * ターゲット切替は基本なし（1vs1想定）
* チームバトル:

  * オプションでチームバトル可能（2対2、3対1など）
  * 味方との相殺・おじゃま共有はなし（完全個別処理）
* 固有仕様:

  * テトリスとぷよぷよの混合対戦時は攻撃バランスが独自調整されている

---

### 3. 機能仕様

#### 3.1 基本機能

* ネクスト表示（最大5個）
* ゴーストミノ表示
* ホールド機能
* スコア、レベル、ライン数の表示
* T-Spin、REN、B2Bなどの演出エフェクト

#### 3.2 オプション設定

* タイムの表示/非表示
* ホールド ON/OFF
* ゴーストミノ表示 ON/OFF
* ネクスト表示数（1〜5）
* ハードドロップ ON/OFF
* 回転方向設定（右回転・左回転の入れ替え）
* キー設定カスタマイズ（左右移動、回転、ドロップ、ホールド、ポーズ）
* DAS/ARR/ロック遅延 調整

#### 3.3 表示設定

* 色覚補正モード
* BGM/効果音のON/OFF・音量調整
* ゴーストミノの色（通常・半透明・無効）
* 背景の動的切替

#### 3.4 練習・分析向け機能

* リプレイ保存
* シード固定（テスト用）
* トレーニングモード（自由ドロップ、回転確認）

---

### 4. UI/UX設計

#### 4.1 画面レイアウト（シングル）

```
┌───────────────┐
│ HOLD           NEXT │
│ [ O ]         [ J Z S L I T O ]  ← 5個表示 │
├───────────────┤
│                   │
│    プレイフィールド（10×20）  │
│                   │
├───────────────┤
│ Score: 123456     │
│ Level: 12         │
│ Lines: 45         │
│ REN: 3 REN!       │
│ T-Spin: T-Spin Double! │
└───────────────┘
┌───────────────┐
│  操作ガイド（左下）        │
│  ←/→: 移動                │
│  ↓: ソフトドロップ         │
│  ↑: ハードドロップ         │
│  Z/X: 回転                 │
│  C: ホールド               │
└───────────────┘
```

* ※操作ガイドはカスタム操作に応じてリアルタイム更新される
* エフェクトはフィールド上部または得点欄付近に表示

#### 4.2 画面レイアウト（対戦）

```
┌─────────────────────────────┐
│ 自フィールド ┃ 相手フィールド群表示（最大4人）     │
│ [HOLD] [10x20] [NEXT]       ┃ [相手1] [相手2] ...       │
│          ↓ 攻撃ゲージ         ┃ おじゃまライン数表示         │
│ [得点・REN・B2B・T-Spin演出] ┃ ターゲット表示 (○/◎/×)        │
└─────────────────────────────┘
```

* 各相手のミニフィールドを右側または周囲に表示（観戦・ターゲット指定可能）
* おじゃまラインゲージは自分と相手に対して可視化
* ターゲット切替UI（カウンター、ランダム、KO、バッジ）を上部/右上に配置
* バッジ数や残人数、プレイヤー名も表示可
* チーム戦時はフィールド上部や色、バッジマークでチームを区別

---

### 5. モード（任意追加）

* マラソン：150ライン消去で終了（レベルアップあり）
* スプリント：40ラインを最速で消去するモード
* エンドレス：無限プレイ
* バトル：対人またはCPU戦（拡張オプション）

#### 5.1 バトルモード（対戦ルール設定）

* 対戦人数：1対1、最大4人（ローカル or オンライン）
* 攻撃システム：

  * ライン攻撃：2ライン以上の同時消去・T-Spin・コンボ・B2Bで相手に"おじゃまライン"を送信
  * ガベージ（おじゃま）の蓄積と遅延：一定時間内に消せば相殺可能
  * ターゲット指定：

    * ランダム（ランダムな相手へ）
    * カウンター（自分を攻撃してきた相手へ）
    * KO狙い（瀕死の相手を狙う）
    * バッジ狙い（最多KOプレイヤーを狙う）
* バッジシステム（Tetris 99準拠）：倒した相手に応じて攻撃力がアップ
* ミラー同期：全プレイヤーが同じ7-BAGシーケンスを使用
* 勝利条件：最後まで生き残ったプレイヤーが勝利
* カウントダウンスタート：全プレイヤーが準備完了で開始（オンライン対応）

#### 5.2 チームバトルモード（チーム戦対応）

* チーム数：2〜4チーム
* チームメンバーは同じ色またはバッジで識別される
* 攻撃ルール：

  * おじゃまラインは別チームの誰かに均等に分配
  * 相手チーム全員を倒すと勝利（ラストチーム残存）
  * 味方への攻撃は不可（フレンドリーファイア無効）
* ターゲット切替：

  * チーム単位で自動ターゲット（バランス調整）
  * マニュアル切替も可（強者狙い等）
* UI要素：

  * チームごとの生存人数バー
  * 味方と敵の区別（色・エフェクト）
  * チーム総スコアやチームMVP表示（任意）

---

### 6. 拡張機能一覧（公式準拠の追加機能）

#### 🎥 6.1 リプレイ & 観戦機能

| 機能名      | 説明                                   |
| -------- | ------------------------------------ |
| リプレイ記録   | プレイ内容（入力・ミノシーケンスなど）を保存し再生可能にする       |
| 観戦モード    | 対戦中の他プレイヤーをリアルタイムで観戦できる（Tetris 99など） |
| スローモード再生 | 再生速度調整や早送り、巻き戻しが可能なゲームもある            |

#### 🎯 6.2 ターゲット/攻撃可視化機能

| 機能名        | 説明                           |
| ---------- | ---------------------------- |
| ターゲットライン表示 | 誰が誰を攻撃しているかを線や矢印で視覚化         |
| 攻撃先強調      | 自分が攻撃中の相手フィールドを強調表示          |
| おじゃま予告バー   | 受けるおじゃまライン数を事前にバー表示（削除で相殺可能） |

#### 🏆 6.3 成績・統計機能

| 機能名       | 説明                                  |
| --------- | ----------------------------------- |
| ハイスコア保存   | スコア・時間・ライン数などの記録をローカルに保存            |
| 成績履歴      | 各ゲームの詳細（T-Spin回数、REN最大数、KO数など）を確認可能 |
| メダル/バッジ集計 | 対戦で獲得したバッジ数の統計表示                    |

#### 🧩 6.4 プレイ補助・UX

| 機能名       | 説明                                    |
| --------- | ------------------------------------- |
| プレイ中一時停止  | Escキー等で中断 → 設定変更や再開が可能                |
| 操作設定の即時反映 | 設定画面から戻ると即座に操作系が反映される                 |
| ガイドラインモード | オフライン練習時に公式の各種ルールをハイライト表示（T-Spinや壁蹴り） |
| プレイ環境チェック | FPS表示、入力ラグテスト、ボタン反応可視化など上級者向け支援       |

#### 🎨 6.5 演出・ビジュアル強化

| 機能名          | 説明                                |
| ------------ | --------------------------------- |
| テーマ切替        | フィールドやミノの見た目を変更（レトロ、近未来、ファンタジーなど） |
| 背景アニメーション    | レベルごとに動く背景（Tetris Effectなどで顕著）    |
| T-Spinエフェクト  | 特殊演出（光る・揺れる）で視覚的に爽快感を演出           |
| ミノ落下音バリエーション | ハードドロップやT-Spinで音が変化する演出付き         |

#### 🧠 6.6 AI関連（練習・対戦用）

| 機能名        | 説明                        |
| ---------- | ------------------------- |
| AI対戦モード    | コンピュータと対戦（難易度可変）          |
| トレーナーモード   | 特定状況の再現（T-Spin練習、REN継続など） |
| 攻撃シミュレーション | どの行動が何ライン攻撃に相当するかをガイド表示   |

#### 🔐 6.7 ユーザーアカウント・クラウド連携（オンライン版）

| 機能名       | 説明                                 |
| --------- | ---------------------------------- |
| ユーザーアカウント | プロファイルやプレイ履歴の保存                    |
| クラウドセーブ   | ハイスコアや設定をクラウドに保存し、複数デバイスで同期        |
| フレンド機能    | 一緒に対戦したプレイヤーとの再マッチやチャット（Switch版など） |

---

7. 技術構成（ハイブリッド）
7.1 全体構成
JavaScript：UI・操作処理・描画
Go：サーバー処理、WebSocket管理、並列処理
C++：AI・ロジック（評価・探索）

7.2 フォルダ構成
/Tetris
├── public/       # JS/HTML/CSS
├── server/       # Go（管理層）
├── core/         # C++（AI）
├── config/       # JSON設定
└── README.md

7.3 AIロジック（Go×C++ハイブリッド）
GoがgoroutineでC++評価プロセスを複数並列起動
C++がJSONで候補手を受け取り、最良手を評価
GoがUIへスコア順の最適手を返却
JSON例：
{
  "field": [[0,1,0,...],...],
  "mino": "T",
  "hold": true,
  "next": ["L","I"]
}
→
{
  "x": 4,
  "y": 0,
  "rotation": 1,
  "score": 45.3
}

8. 開発フェーズ（段階計画）
フェーズ1：シングルプレイ完成（済）
基本操作、描画、スコア、ゲームオーバー、設定UI
フェーズ2：演出追加
T-Spin、REN、B2B演出、テーマ切替、音
フェーズ3：AIロジック統合
Go⇔C++通信、1P CPU操作、評価ベース思考実装
フェーズ4：ぷよテト型対戦
固定ターゲット、ローカル/オンライン対戦、ガベージ処理
フェーズ5：Tetris 99型対戦
ターゲットUI、バッジ、カウンター、99人構成、チームモード
フェーズ6：リプレイ・観戦・成績
記録・再生・スロー／観戦UI／統計出力
フェーズ7：クラウド／アカウント
ユーザー認証、セーブ同期、フレンド対戦

9. 今後の拡張案（Optional）
オンラインランキング（スコア送信）
フレンドマッチ
AI対戦モード
テーマ切り替え（レトロ風、未来風）

==========================================================================
Tetris/
├── public/                             # 🎮 クライアント側のUI/音/画像/JSなど（Live Server対象）
│   ├── html/                           # 📄 各種HTML画面
│   │   ├── index.html                  # タイトル画面・モード選択（TOP画面）
│   │   ├── settings.html               # 設定画面（操作設定/音/見た目など）
│   │   ├── credits.html                # クレジット画面（制作者や素材元など）
│   │   └── single/                     # 一人プレイモードのHTML画面
│   │       ├── marathon.html           # マラソンモード画面
│   │       └── sprint.html             # スプリントモード画面
│   ├── js/                             # 📜 JavaScriptコード全般
│   │   ├── main.js                     # JSエントリポイント。モード選択・初期化処理
│   │   ├── websocket.js                # WebSocket通信（観戦・対戦時の送受信）
│   │   ├── replay.js                   # 入力・盤面状態の記録/再生（未完成）
│   │   ├── core/                       # ゲームの中核ロジック（フィールド・ミノ等）
│   │   │   ├── draw.js                 # Canvas描画処理（盤面・ミノ・ゴースト等）
│   │   │   ├── field.js                # フィールド状態管理・接触判定・ライン消去
│   │   │   ├── input.js                # ユーザー入力処理（キー操作 → アクション変換）
│   │   │   ├── mino.js                 # ミノの定義・生成・回転・7BAG管理
│   │   │   ├── score.js                # 得点計算・レベル・ライン数管理
│   │   │   └── srs.js                  # SRSローテーション（壁蹴りなど）
│   │   ├── single/                     # 一人プレイ用ロジック
│   │   │   ├── single_game.js          # 一人用共通：ミノ生成・Holdなど
│   │   │   ├── marathon.js             # マラソン用：レベル管理・得点処理
│   │   │   ├── sprint.js               # スプリント用：タイマー・ライン数目標
│   │   │   ├── marathon_game.js        # Marathon初期化＆起動
│   │   │   └── sprint_game.js          # Sprint初期化＆起動
│   │   ├── ai/                         # AIモード関連（対CPU戦・C++連携）
│   │   │   ├── ai_game.js              # 対CPU戦ロジック
│   │   │   └── ai_call.js              # Go/C++との連携インターフェース
│   │   └── ui/                         # UI制御ロジック（表示・設定）
│   │       ├── ui.js                   # スコア/レベル/タイマー/演出更新
│   │       ├── settings.js             # ユーザー設定（キー・音量・テーマ）の反映
│   │       └── sound.js                # BGM/効果音の再生・停止・音量調整
│   ├── css/                            # 🎨 CSSスタイル
│   │   ├── base.css                    # リセット/基本カラー/フォント
│   │   ├── layout.css                  # 配置/レイアウト
│   │   ├── pages/                      # HTMLページ別CSS
│   │   │   ├── index.css               # index.html用
│   │   │   ├── settings.css            # settings.html用
│   │   │   └── game.css                # game関連ページ
│   │   ├── components/                 # UI部品パーツ単位
│   │   │   ├── tab.css                 # タブ切り替え
│   │   │   ├── button.css              # ボタン
│   │   │   ├── form.css                # 入力フォーム全般
│   │   │   ├── result.css              # リザルト表示直前/フェード
│   │   │   └── message.css             # メッセージ表示
│   │   └── single/                     # 一人プレイモード専用スタイル
│   │       ├── marathon.css            # マラソン用UI（スコア/レベル表示など）
│   │       └── sprint.css              # スプリント用UI（タイマー/結果演出など）
│   └── assets/                         # 🔊🎨 素材ファイル
│       ├── sounds/                     # 音声素材
│       │   └── korobeiniki8bit.m4a     # 8bit風コロブチカ（BGM）
│       └── images/                     # 画像素材
│           └── background.png          # 背景画像
│
├── cmd/                                # 🚀 Goサーバー起動用のメイン関数
│   └── main.go                         # go run で起動される
│
├── router/                             # 🌐 HTTP/WebSocketルーティング
│   └── router.go                       # 静的ファイル配信と /ws ハンドリング
│
├── server/                             # 🧠 Goバックエンド（通信・同期・リプレイ）
│   ├── hub.go                          # WebSocketハブ（クライアント管理）
│   ├── game_state.go                   # ゲーム状態構造体・同期ロジック
│   ├── garbage.go                      # 対戦時の妨害ライン生成・受信処理
│   ├── ai_bridge.go                    # Go→C++ 連携（AI評価呼び出し）
│   ├── replay.go                       # 入力・状態の記録/保存/再生
│   └── util.go                         # 汎用ツール（ID生成・ログ出力など）
│
├── core/                               # 🤖 C++製 AIロジック本体
│   ├── main.cpp                        # Goから呼ばれるC++エントリーポイント
│   ├── ai.cpp                          # 通常のAI探索ロジック
│   ├── ai_parallel.cpp                 # 並列探索AI（Hold+Next最適化）
│   ├── ai.hpp                          # AI関数/構造体定義ヘッダ
│   ├── evaluator.cpp                   # 通常評価関数（穴・高さなど）
│   ├── evaluator_q.cpp                 # 強化学習ベースのQ関数評価
│   ├── evaluator.hpp                   # 評価関数共通定義
│   ├── field.cpp                       # フィールド操作・ライン消去・T-Spin判定
│   ├── field.hpp                       # フィールド定義構造体
│   ├── mino.cpp                        # ミノ定義・SRS回転・キック処理
│   ├── mino.hpp                        # ミノ構造体と関連定義
│   ├── json.hpp                        # nlohmann/jsonライブラリ（AIパラメータ入出力）
│   └── Makefile                        # make ビルド用スクリプト
│
├── config/                             # ⚙️ 各種設定ファイル
│   ├── rules.json                      # 得点・攻撃・レベル条件などのルール
│   ├── keys.json                       # キー割り当て設定（ZXCなど）
│   ├── settings.json                   # 表示・操作設定
│   ├── theme.json                      # テーマ（色・フォント・背景など）
│   └── ai_params.json                  # 学習済みAIパラメータ（Q関数）
│
├── scripts/                            # 🛠️ 補助スクリプト
│   └── ai_params_generator.py          # Q関数のパラメータ生成スクリプト
│
├── data/                               # 📊 プレイログや統計データ
│   ├── replays/                        # リプレイ記録（JSON）
│   └── stats/                          # 勝率・成績データ
│
├── .vscode/                            # 🧩 VSCode設定（開発支援）
│   ├── c_cpp_properties.json           # C++補完用パス設定
│   ├── launch.json                     # F5でGoサーバー起動設定
│   └── settings.json                   # Live Server/フォーマッタなどの設定
│
├── .env                                # 環境変数設定（PORT=8080など）
├── go.mod                              # Goモジュール初期化ファイル
├── go.sum                              # Go依存のバージョンロック
└── README.md                           # 📖 プロジェクト概要・構築手順・ライセンスなど



各モジュールの主な責任
階層	ファイル/フォルダ	役割
public/	draw.js	フィールド・ミノ描画
input.js	カスタム操作対応の入力管理
ui.js	スコア・演出・T-Spin表示
websocket.js	WebSocketでGoと通信
server/	hub.go	多人数接続管理（チャットサーバーのような構成）
ai_bridge.go	Go→C++のAI呼び出し・並列処理
game_state.go	各プレイヤーのゲーム進行状態保持
core/	ai.cpp	候補手評価・最良手選択（ミニマックス・評価関数）
evaluator.cpp	穴数・地形・T-Spin可能性・REN継続性など評価スコア算出


今後の拡張フォルダ（予定）
cloud/：アカウント・フレンド・スコア同期機能（クラウドAPI設計）
trainer/：練習モード、ステージ再現、T-Spinチェックロジック
test/：自動テスト（AI動作の再現性やエンジン単体テスト）


ai_params.jsonの内容説明(jsonファイル内ではコメント出来ない為)
これらはQ関数ベースの評価関数（evaluator_q.cpp）で使用される学習済みパラメータ（重み）
[
  0.8,  // holes（空白の数を嫌う）
  0.5,  // height（全体の高さを抑える）
  0.3,  // bumpiness（凸凹を嫌う）
  1.0,  // REN（連続ライン消しを好む）
  1.2   // B2B（Back-to-Backを評価）
]


[プロジェクト編集再開時手順(wsl起動方法)]
①PowerShellにて行う方法
> wsl
> cd "/mnt/c/Users/m_sato/OneDrive - ooharastudent/デスクトップ/アプリケーション開発/Tetris"
> code .
②VSCodeにて行う方法
> wsl
> code .
(これらをすることでcoreのc++などが正常に動くようになる)


[Tetrisプロジェクト起動方法]
WSLを起動してプロジェクトに移動
> wsl
> cd "/mnt/c/Users/m_sato/OneDrive - ooharastudent/デスクトップ/アプリケーション開発/Tetris"
↓
(初回のみ)依存パッケージをインストール
> go mod tidy
↓
> go run cmd/main.go → 「http://localhost:8080/」で開く
/*
「F5」ボタンを押す(Goサーバー、AIビルド、ブラウザ起動)
*/

/*
[再起動]
Ctrl + Shift + P → Live Server: Stop Live Server
*/

[注意事項]
キー設定はlocalStorageに保存されているのでリセットする場合はlocalStorage.clear()する